 // Assignment: 
 //    Write a program in C that describes the structure of drugs with fields:
 //    a unique code (letters and digits), name, price and year of manufacture. 
 //	   The program is organized with the menu and realize (through functions): 
 //	    *Reading data from a file!
 //	    *Save the data in a file!
 //     *Display data on the screen! 
 //	    *Output data for all medicines whose price is less than or equal to a predetermined value!
 //     *Delete Data medicines produced before a year!

 //  Requirements for coursework: 
 //    1. Filenames are stored data information system can only be submitted by the user as parameters on the command line when starting the program. 
 //    2. Consumer Dialogue be implemented through menus and dialogs.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define N 30

typedef struct drug
{
	char UniversalCode[N];
	char Name[N];
	float Price;
	int Year;
	struct drug *next;
} Cure;

typedef enum{FALSE,TRUE} bool_value;

Cure *New_Item(	FILE *fp)
{
	Cure *temp = NULL;

	temp = (Cure*) malloc(sizeof(Cure));
	if(temp == NULL)
	  return NULL;
	else
	{	
    fscanf(fp,"%s %s %f %d",&temp->UniversalCode,&temp->Name,&temp->Price,&temp->Year);
	temp->next = NULL;
	return temp;
	}
}

Cure *ReadFromFile(char *FileName)
{
	Cure *root = NULL;
	Cure *current = NULL;
	FILE *fp = fopen(FileName,"r");		
	bool_value error = FALSE, flag = FALSE;
	int  size = 0, i; 

	if(fp == NULL)
	{
		perror("Error reading from file");
		exit(1);
	}
	else
	{
	    while(!feof(fp))
		      {
				 
		          if(root == NULL)
					 {
			               if((root = New_Item(fp)) == NULL)
				              error = TRUE;
			               else
			                 current = root; 
					 }
		          else 
					 {		                  
		     	          if((current->next =New_Item(fp)) == NULL)
				              error = TRUE;
			              else
			                 current = current->next;
		             }  
		     }
	}

	    fclose(fp);
	    system("cls");
	    if(error == FALSE)
	      printf("\n  Program status: It's all done. Reading from file was successfully!\n\n");
	    else
	      printf("\n  Program status: Not enough memory. Reading from file was unsuccessfully!\n\n");

	return root;
}

void WriteInFile(char *FileName,Cure *root)
{
	Cure *temp;
	bool_value  error=FALSE;
    FILE *fp = fopen(FileName,"w");
	
	if(fp != NULL)
	{
		for(temp=root;temp != NULL; temp = temp->next)
		{
			fprintf(fp,"%s %s %.2f %d\n",temp->UniversalCode,temp->Name,temp->Price,temp->Year);
		}	
	}
	else
	{
		perror("Error reading from file");
		error = TRUE;
	}
	fclose(fp);
	system("cls");
	if(error == FALSE)
	  printf("\n  Program status: It's all done. Writing data in file was successfully!\n\n");
	else
	  printf("\n  Program status: Something went wrong while opening file!\n\n");

}


void ShowList(Cure *root)
{
	Cure *temp;
	int count = 1;
	temp = root;

	system("cls");
	printf("\n All data in List:\n\n");
	while(temp != NULL)
	{
		printf(" %d. %s %s %.2f %d\n",count,temp->UniversalCode,temp->Name,temp->Price,temp->Year);
		temp=temp->next;
		count++;
	}
	fflush(stdout);
	if(count == 1)
		printf("\n  Program status: An unexpected error occurred. No data in the list!");
	else 
		printf("\n\n  Program status: It's all done!!!\n\n");
}

void FilterByPrice(Cure *root)
{
	Cure *temp;
	float PriceFilter;
	int count = 1;

   
	printf("Please enter price to see all drugs with lower price:");
	scanf("%f",&PriceFilter);
    temp = root;
    system("cls");
	printf("\nThe products which price is lower than %.2f:\n\n",PriceFilter);
	while(temp != NULL)
	{
		if(temp->Price<=PriceFilter)
		{
			printf(" %d. %s %s %.2f %d\n",count,temp->UniversalCode,temp->Name,temp->Price,temp->Year);
			count++;
		}
		temp = temp->next;
	}
	if(count == 1)
	   printf("No products whose price is lower than the announced(%.2f)!\n\n",PriceFilter);	
	else 
	   printf("\n\n  Program status: It's all done!!!\n\n\n");
}

void FreeList(Cure *root)
{
     Cure *current = NULL;
	 bool_value flag = FALSE;

	 current = root;
	 while(current!=NULL)
	 {
		 root = root->next;
		 free(current);
		 current = root;
		 flag = TRUE;
	 }
	 if(flag == FALSE)
	   printf("\n\n  Program status: An unexpected error occurred. Cannot free the memory!");	
	else 
	   printf("\n\n  Program status : It's all done. The memory was free successfully!!!!\n  \t Bye, see ya..!!!\n\n");
}

Cure *DeleteItem(Cure *root, char *FileName)
{
	Cure *prev_item = root;
	Cure *curr_item = root;
	Cure *newroot = root;
	int filter_year, count = 0;
	bool_value flag = FALSE;
	
	FILE *fp;
	char ch;

	printf("\n Please enter the year:");
	scanf("%d",&filter_year);
	while(curr_item != NULL)
	{
		if(curr_item->Year < filter_year)
		{
			if(curr_item == newroot)
			{
			   newroot = newroot->next;
			   prev_item = newroot;
			   flag = TRUE;
		    }
		    else	
			     prev_item->next = curr_item->next;

		   free(curr_item);
		   curr_item=prev_item;
		   count++;
		}
		prev_item = curr_item;
		if(flag == FALSE)
			curr_item = curr_item->next;
		flag=FALSE;
	}
	system("cls");
	if(count == 0)
		printf("\n Program status: No element was deleted!\n\n");
	else
	{
	system("cls");
	printf("\n Program status: It's all done. The %d items were deleted successfully!\n\n",count);
	if(SaveNewData(newroot)==FALSE)
		printf("An unexpected error occurred. Cannot save new data in a file!\n\n");
	}
	return newroot;
}

int SaveNewData(Cure *newroot)
{
	char FileExtension[]=".txt";
	char NewFileName[N];	
	bool_value flag = FALSE;
	char ch;

	do  {
	  printf("\n Do you want to save new data in a file?(Y/N)\n");
	  fflush(stdin);
	  scanf("%c",&ch);
	  if((ch == 'n')||(ch == 'N')) 
		  {
			  flag = TRUE;
			  break;
	      }
	  if((ch == 'y')||(ch == 'Y'))
	   {
		printf("Enter the filename!\n");	
	    scanf("%s",NewFileName);
		strcat(NewFileName,FileExtension);	
		WriteInFile(NewFileName,newroot);
		flag = TRUE;
	   }
	}  while((ch != 'y')&&(ch != 'Y')&&(ch != 'n')&&(ch != 'N'));
	return flag;
}


Cure *Menu()
{
	char FileName[N];
	char FileExtension[]=".txt";
	Cure *root = NULL;
	int choice = 0;

	do {
		printf("\t  List Menu\n\n");
	    printf("  1.Reading data from a file!\n  2.Saving data to file!\n  3.Displaying data on the screen!\n");
		printf("  4.Output data for all medicines whose price is less than or equal\n    to a predetermined price!\n");
	    printf("  5.Delete data on drug produced before chosen by you years!\n");
		printf("  6.Exit!\n");
		printf("\n    It's your Choice:");
        fflush(stdin);
	    scanf("%d",&choice); 
		if(choice == 6) break;
		if((choice<0)||(choice>7))
			printf("Please choose from 1 to 6\n\n");
	       switch(choice)
	                    {
	                       case 0:
	                       case 1: 
	                            {  
									printf("Enter the filename!\n");
									scanf("%s",FileName);
									strcat(FileName,FileExtension);							
								    root = ReadFromFile(FileName);break;
		                        }
	                       case 2: 
							    { 
									if(root == NULL)
										printf("An unexpected error occurred. The List is empty. \n Please choose 1 to insert data!\n\n");
									 else 
									    WriteInFile(FileName,root);break;
		                        }
	                       case 3:
	                            {
									if(root == NULL)
										printf("An unexpected error occurred.The List is empty. \n Please choose 1 to insert data!\n\n");
									 else 
		                                ShowList(root);break;										
								}
	                       case 4:
		                        {
									if(root == NULL)
										printf("An unexpected error occurred. The List is empty. \n Please choose 1 to insert data!\n\n");
								     else 
			                            FilterByPrice(root);break;
		                        }       
						   case 5:
							    {
								    if(root == NULL)
										printf("An unexpected error occurred. The List is empty. \n Please choose 1 to insert data!\n\n");
									 else 
								       root = DeleteItem(root,FileName);break;
								}
		                  }
	}  while(TRUE);
	return root;
}

int main()
{ 

	Cure *head = NULL;
	head = Menu();
	FreeList(head);

	printf("\n");
    system("PAUSE");
	return 0;
}